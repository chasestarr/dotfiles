#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}


# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a git.io short URL
function gitio() {
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage: \`gitio slug url\`";
    return 1;
  fi;
  curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Call from a local repo to open the repository on github/bitbucket in browser
repo() {
  local giturl
  giturl=$(git config --get remote.origin.url | sed 's/git@/\/\//g' | sed 's/.git$//' | sed 's/https://g' | sed 's/:/\//g')
  if [[ $giturl == "" ]]; then
    echo "Not a git repository or no remote.origin.url is set."
  else
    local gitbranch
    gitbranch=$(git rev-parse --abbrev-ref HEAD)
    local giturl="http:${giturl}"

    if [[ $gitbranch != "master" ]]; then
      if echo "${giturl}" | grep -i "bitbucket" > /dev/null ; then
        local giturl="${giturl}/branch/${gitbranch}"
      else
        local giturl="${giturl}/tree/${gitbranch}"
      fi
    fi

    echo "$giturl"
    open "$giturl"
  fi
}

# go to a folder easily in your gopath
gogo(){
  local d=$1

  if [[ -z $d ]]; then
    echo "You need to specify a project name."
    return 1
  fi

  if [[ "$d" == github* ]]; then
    d=$(echo "$d" | sed 's/.*\///')
  fi
  d=${d%/}

  # search for the project dir in the GOPATH
  local path=( $(find "${GOPATH}/src" \( -type d -o -type l \) -iname "$d"  | awk '{print length, $0;}' | sort -n | awk '{print $2}') )

  if [ "${path[0]}" == "" ] || [ "${path[*]}" == "" ]; then
    echo "Could not find a directory named $d in $GOPATH"
    echo "Maybe you need to 'go get' it ;)"
    return 1
  fi

  # enter the first path found
  cd "${path[0]}" || return 1
}

# creates a gif from a mov file
gif(){
  in="$1"
  out=${in%.*}
  ffmpeg -i ${in} -s 1080x720 -pix_fmt rgb24 -r 18 -f gif - | gifsicle --optimize=3 --delay=3 > "${out}.gif"
};

